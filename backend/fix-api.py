# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lUxVOYTcqmpDwlyfvlLwrJGlYaS-rSHp
"""

import pickle



from flask import Flask, jsonify
import pandas as pd
import json
from flask_cors import CORS
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.inspection import permutation_importance
from sklearn.preprocessing import LabelEncoder

app = Flask(__name__)
CORS(app)




@app.route('/api/data', methods=['GET'])
def get_data():
  test = pd.read_csv('test.txt')
  test = test.drop('Unnamed: 0', axis=1)
  for i in range(1000):
    if int(test.loc[i, ['Repairs']]) == 0:
      test.loc[i, ['Repairs']] = 1
    if int(test.loc[i, ['Asset Age (days)']]) <= int(test.loc[i, ['Days Since Last Service']]):
      temp = int(test.loc[i, ['Asset Age (days)']])
      test.loc[i, ['Asset Age (days)']] = int(test.loc[i, ['Days Since Last Service']])
      test.loc[i, ['Days Since Last Service']] = temp
    if int(test.loc[i, ['Work Orders']]) < int(test.loc[i, ['Repairs']]):
      test.loc[i, ['Work Orders']] = int(test.loc[i, ['Repairs']])

  test = test[test['Predicted Cost of Repair'] >= 50]
  test = test[test['Previous Cost of Repair'] >= 50]
  test = test[test['Naive Prediction of Days'] >= 0]
  test = test[test['Naive Prediction of Days'] <= 1000]

  test['Naive Prediction of Days'] = svr_preds
  test['Naive Prediction of Days'] = test['Naive Prediction of Days'].abs()
  test['Naive Prediction of Days'] = test['Naive Prediction of Days'].round(0)
  test = test.iloc[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 14, 15, 16, 17, 18, 19, 24, 31, 29, 80, 92, 181, 270]]
  testJson = test.to_json(orient='records')
  #with open('data.json', 'w') as file:
  #    file.write(testJson)
  return testJson

if __name__ == "__main__":
  with open('svr_preds.pkl', 'rb') as file:
    svr_preds = pickle.load(file)
  app.run(debug=True)